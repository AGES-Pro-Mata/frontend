services:
  # Development Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: promata-frontend
    environment:
      - NODE_ENV=development
      - VITE_API_URL=${VITE_API_URL}
      - VITE_APP_ENV=${VITE_APP_ENV}
      - VITE_APP_VERSION=${VITE_APP_VERSION}
      - CHOKIDAR_USEPOLLING=true # For file watching in containers
    ports:
      - "${FRONTEND_DEV_PORT_MAPPING}"
    volumes:
      - .:/app
      - frontend_node_modules:/app/node_modules
      - frontend_cache:/app/.cache
    networks:
      - promata_dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "${FRONTEND_DEV_HEALTHCHECK_URL}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Production Frontend (for testing)
  frontend-prod:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-local}
        VERSION: ${VERSION:-local}
    container_name: promata-frontend-prod
    environment:
      - NODE_ENV=production
      - VITE_API_URL=${VITE_API_URL}
      - VITE_APP_ENV=${VITE_APP_ENV}
      - VITE_APP_VERSION=${VITE_APP_VERSION}
      - NGINX_WORKER_PROCESSES=${NGINX_WORKER_PROCESSES}
      - NGINX_WORKER_CONNECTIONS=${NGINX_WORKER_CONNECTIONS}
    ports:
      - "${FRONTEND_PROD_PORT_MAPPING}"
    networks:
      - promata_dev
    restart: unless-stopped
    depends_on:
      - backend-mock
    healthcheck:
      test: ["CMD", "curl", "-f", "${FRONTEND_PROD_HEALTHCHECK_URL}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    profiles: ["prod-test"]

  # Testing Container
  frontend-test:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: promata-frontend-test
    environment:
      - NODE_ENV=test
      - CI=true
    volumes:
      - .:/app
      - frontend_node_modules:/app/node_modules
      - test_results:/app/test-results
      - coverage:/app/coverage
    networks:
      - promata_dev
    command: ["npm", "run", "test:ci"]
    profiles: ["test"]

  # Nginx for serving static files (testing production build)
  nginx-static:
    image: nginx:alpine
    container_name: promata-nginx-static
    ports:
      - "8081:80"
    volumes:
      - ${NGINX_DIST_VOLUME}
      - ${NGINX_CONF_VOLUME}
    networks:
      - promata_dev
    restart: unless-stopped
    profiles: ["static"]

  frontend-watcher:
    image: node:18-alpine
    container_name: promata-frontend-watcher
    working_dir: /app
    volumes:
      - .:/app
    command: sh -c "npm install -g nodemon && nodemon --watch src --exec 'docker-compose restart frontend-dev'"
    networks:
      - promata_dev
    profiles: ["dev-helper"]

networks:
  promata_dev:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  frontend_node_modules:
    driver: local
  frontend_cache:
    driver: local
  test_results:
    driver: local
  coverage:
    driver: local
