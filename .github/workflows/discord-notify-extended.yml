name: Discord Extended Notifications - Frontend

on:
  pull_request_review:
    types: [submitted]
  
  issues:
    types: [opened, closed]
    
  # FRONTEND: Monitora apenas workflows do frontend
  workflow_run:
    workflows: ["Frontend CI/CD Pipeline", "CI/CD Pipeline"]
    types: [completed]
    
  push:
    branches: [main, dev]

jobs:
  notify-reviews:
    if: github.event_name == 'pull_request_review'
    runs-on: ubuntu-latest
    steps:
      - name: Post Review to Discord
        env:
          WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_URL: ${{ github.event.pull_request.html_url }}
          REVIEWER: ${{ github.event.review.user.login }}
          REVIEW_STATE: ${{ github.event.review.state }}
        run: |
          case "$REVIEW_STATE" in
            "approved") EMOJI="✅"; COLOR=65280; ACTION="aprovou" ;;
            "changes_requested") EMOJI="🔄"; COLOR=16776960; ACTION="solicitou alterações em" ;;
            "commented") EMOJI="💬"; COLOR=3447003; ACTION="comentou em" ;;
            *) EMOJI="📝"; COLOR=3447003; ACTION="revisou" ;;
          esac
          
          cat > payload.json << EOF
          {
            "embeds": [
              {
                "title": "$EMOJI Review Frontend: $PR_TITLE",
                "url": "$PR_URL",
                "description": "$REVIEWER $ACTION o Pull Request do frontend",
                "color": $COLOR,
                "fields": [
                  {
                    "name": "Revisor",
                    "value": "$REVIEWER",
                    "inline": true
                  }
                ],
                "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
              }
            ]
          }
          EOF
          
          curl -sS -X POST -H "Content-Type: application/json" -d @payload.json "$WEBHOOK"

  notify-issues:
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest
    steps:
      - name: Post Issue Status to Discord
        env:
          WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_URL: ${{ github.event.issue.html_url }}
          ISSUE_AUTHOR: ${{ github.event.issue.user.login }}
          ACTION: ${{ github.event.action }}
        run: |
          case "$ACTION" in
            "opened") EMOJI="📝"; COLOR=3447003; ACTION_TEXT="Criou issue no frontend" ;;
            "closed") EMOJI="✅"; COLOR=65280; ACTION_TEXT="Fechou issue do frontend" ;;
            *) EMOJI="📋"; COLOR=3447003; ACTION_TEXT="Atualizou issue do frontend" ;;
          esac
          
          cat > payload.json << EOF
          {
            "embeds": [
              {
                "title": "$EMOJI Issue Frontend: $ISSUE_TITLE",
                "url": "$ISSUE_URL",
                "description": "$ACTION_TEXT por $ISSUE_AUTHOR",
                "color": $COLOR,
                "fields": [
                  {
                    "name": "Autor",
                    "value": "$ISSUE_AUTHOR",
                    "inline": true
                  }
                ],
                "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
              }
            ]
          }
          EOF

          curl -sS -X POST -H "Content-Type: application/json" -d @payload.json "$WEBHOOK"

  notify-build:
    if: github.event_name == 'workflow_run'
    runs-on: ubuntu-latest
    steps:
      - name: Post Frontend CI/CD Status to Discord
        env:
          WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
          WORKFLOW_NAME: ${{ github.event.workflow_run.name }}
          CONCLUSION: ${{ github.event.workflow_run.conclusion }}
          BRANCH: ${{ github.event.workflow_run.head_branch }}
          RUN_URL: ${{ github.event.workflow_run.html_url }}
        run: |
          # Determinar imagem Docker baseado na branch
          DOCKER_IMAGE=""
          BUILD_TYPE=""
          if [[ "$BRANCH" == "dev" ]]; then
            DOCKER_IMAGE="norohim/pro-mata-frontend:dev"
            BUILD_TYPE="Development Build"
          elif [[ "$BRANCH" == "main" ]]; then
            DOCKER_IMAGE="norohim/pro-mata-frontend:latest"
            BUILD_TYPE="Production Build"
          fi

          # Configurar notificação baseado no resultado
          if [[ "$CONCLUSION" == "success" ]]; then
            EMOJI="🚀"
            TITLE="Frontend: Build & Push Docker Realizado com Sucesso!"
            COLOR=65280
            DESCRIPTION="Build do **frontend** executado com sucesso e enviado para DockerHub"
          elif [[ "$CONCLUSION" == "failure" ]]; then
            EMOJI="🚨"
            TITLE="Frontend: Build Docker Falhou!"
            COLOR=16711680
            DESCRIPTION="Build do **frontend** falhou durante a execução"
          else
            EMOJI="⏳"
            TITLE="Frontend: CI Pipeline em Andamento"
            COLOR=16776960
            DESCRIPTION="Pipeline do **frontend** está sendo executado"
          fi

          # Campos adicionais para builds bem-sucedidos
          ADDITIONAL_FIELDS=""
          if [[ "$CONCLUSION" == "success" && -n "$DOCKER_IMAGE" ]]; then
            ADDITIONAL_FIELDS=",
                  {
                    \"name\": \"Tipo de Build\",
                    \"value\": \"$BUILD_TYPE\",
                    \"inline\": true
                  },
                  {
                    \"name\": \"Imagem Docker\",
                    \"value\": \"$DOCKER_IMAGE\",
                    \"inline\": false
                  }"
          fi

          cat > payload.json << EOF
          {
            "embeds": [
              {
                "title": "$EMOJI $TITLE",
                "url": "$RUN_URL",
                "description": "$DESCRIPTION",
                "color": $COLOR,
                "fields": [
                  {
                    "name": "Workflow",
                    "value": "$WORKFLOW_NAME",
                    "inline": true
                  },
                  {
                    "name": "Branch",
                    "value": "$BRANCH",
                    "inline": true
                  },
                  {
                    "name": "Status",
                    "value": "$CONCLUSION",
                    "inline": true
                  }$ADDITIONAL_FIELDS
                ],
                "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
              }
            ]
          }
          EOF

          curl -sS -X POST -H "Content-Type: application/json" -d @payload.json "$WEBHOOK"

  notify-push:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Post Frontend Push Info to Discord
        env:
          WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
          BRANCH: ${{ github.ref_name }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          COMMIT_AUTHOR: ${{ github.event.head_commit.author.name }}
          COMMIT_URL: ${{ github.event.head_commit.url }}
        run: |
          # Só notificar pushes para branches principais
          if [[ "$BRANCH" != "main" && "$BRANCH" != "dev" ]]; then
            echo "Branch $BRANCH não é principal, pulando notificação"
            exit 0
          fi

          # Truncar mensagem de commit se muito longa
          TRUNCATED_MESSAGE=$(echo "$COMMIT_MESSAGE" | cut -c1-100)
          if [[ ${#COMMIT_MESSAGE} -gt 100 ]]; then
            TRUNCATED_MESSAGE="$TRUNCATED_MESSAGE..."
          fi

          cat > payload.json << EOF
          {
            "embeds": [
              {
                "title": "📤 Frontend: Novo Push para $BRANCH",
                "url": "$COMMIT_URL",
                "description": "$TRUNCATED_MESSAGE",
                "color": 3447003,
                "fields": [
                  {
                    "name": "Branch",
                    "value": "$BRANCH",
                    "inline": true
                  },
                  {
                    "name": "Autor",
                    "value": "$COMMIT_AUTHOR",
                    "inline": true
                  }
                ],
                "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
              }
            ]
          }
          EOF

          curl -sS -X POST -H "Content-Type: application/json" -d @payload.json "$WEBHOOK"