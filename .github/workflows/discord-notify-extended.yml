name: Discord Extended Notifications

on:
  # Reviews em PRs
  pull_request_review:
    types: [submitted]
  
  # Status de Issues  
  issues:
    types: [opened, closed]
    
  # Deploys e CI/CD completados
  workflow_run:
    workflows: ["Frontend CI/CD Pipeline", "CI/CD Pipeline", "Deploy Development", "Deploy Production"]
    types: [completed]
    
  # Push para branches principais
  push:
    branches: [main, develop]

jobs:
  notify-reviews:
    if: github.event_name == 'pull_request_review'
    runs-on: ubuntu-latest
    steps:
      - name: Post Review to Discord
        env:
          WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_URL: ${{ github.event.pull_request.html_url }}
          REVIEWER: ${{ github.event.review.user.login }}
          REVIEW_STATE: ${{ github.event.review.state }}
          REPO: ${{ github.repository }}
        run: |
          # Construir payload baseado no estado do review
          case "$REVIEW_STATE" in
            "approved")
              EMOJI="✅"
              COLOR=65280
              ACTION="aprovou"
              ;;
            "changes_requested")
              EMOJI="🔄"
              COLOR=16776960
              ACTION="solicitou alterações em"
              ;;
            "commented")
              EMOJI="💬"
              COLOR=3447003
              ACTION="comentou em"
              ;;
            *)
              EMOJI="📝"
              COLOR=3447003
              ACTION="revisou"
              ;;
          esac
          
          # Criar payload JSON sem interpolação complexa
          cat > payload.json << EOF
          {
            "embeds": [
              {
                "title": "$EMOJI Review: $PR_TITLE",
                "url": "$PR_URL",
                "description": "$REVIEWER $ACTION este PR",
                "color": $COLOR,
                "fields": [
                  {
                    "name": "Repositório",
                    "value": "$REPO",
                    "inline": true
                  },
                  {
                    "name": "Reviewer", 
                    "value": "$REVIEWER",
                    "inline": true
                  }
                ],
                "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
              }
            ]
          }
          EOF
          
          curl -sS -X POST -H "Content-Type: application/json" -d @payload.json "$WEBHOOK"

  notify-issues:
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest
    steps:
      - name: Post Issue to Discord
        env:
          WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_URL: ${{ github.event.issue.html_url }}
          ISSUE_AUTHOR: ${{ github.event.issue.user.login }}
          REPO: ${{ github.repository }}
          ACTION: ${{ github.event.action }}
        run: |
          # Construir payload baseado na ação
          case "$ACTION" in
            "opened")
              EMOJI="🐛"
              COLOR=16776960
              ACTION_TEXT="Nova issue criada"
              ;;
            "closed")
              EMOJI="✅"
              COLOR=65280
              ACTION_TEXT="Issue resolvida"
              ;;
            *)
              EMOJI="📋"
              COLOR=3447003
              ACTION_TEXT="Issue atualizada"
              ;;
          esac
          
          cat > payload.json << EOF
          {
            "embeds": [
              {
                "title": "$EMOJI $ISSUE_TITLE",
                "url": "$ISSUE_URL",
                "description": "$ACTION_TEXT por $ISSUE_AUTHOR",
                "color": $COLOR,
                "fields": [
                  {
                    "name": "Repositório",
                    "value": "$REPO",
                    "inline": true
                  },
                  {
                    "name": "Autor",
                    "value": "$ISSUE_AUTHOR",
                    "inline": true
                  }
                ],
                "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
              }
            ]
          }
          EOF
          
          curl -sS -X POST -H "Content-Type: application/json" -d @payload.json "$WEBHOOK"

  notify-deployment:
    if: github.event_name == 'workflow_run'
    runs-on: ubuntu-latest
    steps:
      - name: Post Deployment Status to Discord
        env:
          WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
          REPO: ${{ github.repository }}
          WORKFLOW_NAME: ${{ github.event.workflow_run.name }}
          CONCLUSION: ${{ github.event.workflow_run.conclusion }}
          BRANCH: ${{ github.event.workflow_run.head_branch }}
          RUN_URL: ${{ github.event.workflow_run.html_url }}
        run: |
          # Determinar ambiente e URLs baseado na branch
          ENVIRONMENT=""
          ENV_URL=""
          if [[ "$BRANCH" == "develop" ]]; then
            ENVIRONMENT="Development (Azure)"
            ENV_URL="https://promata-dev.duckdns.org"
          elif [[ "$BRANCH" == "main" ]]; then
            ENVIRONMENT="Production (AWS)"
            ENV_URL="https://promata.duckdns.org"
          fi
          
          # Determinar se é deployment baseado no nome do workflow
          IS_DEPLOYMENT=false
          if echo "$WORKFLOW_NAME" | grep -i "deploy\|ci.*cd"; then
            IS_DEPLOYMENT=true
          fi
          
          # Configurar emoji, título e cor baseado no resultado
          MENTION=""
          if [[ "$CONCLUSION" == "success" ]]; then
            if [[ "$IS_DEPLOYMENT" == "true" ]]; then
              EMOJI="🚀"
              TITLE="Deploy Realizado com Sucesso!"
            else
              EMOJI="✅"
              TITLE="CI/CD Pipeline Concluído"
            fi
            COLOR=65280
          elif [[ "$CONCLUSION" == "failure" ]]; then
            if [[ "$IS_DEPLOYMENT" == "true" ]]; then
              EMOJI="🚨"
              TITLE="Deploy Falhou!"
              # Mencionar roles em falhas críticas
              MENTION="<@&1399565960922402929><@&1399580242636701726>"
            else
              EMOJI="❌"
              TITLE="CI/CD Pipeline Falhou"
            fi
            COLOR=16711680
          else
            EMOJI="⚠️"
            TITLE="Workflow Cancelado/Timeout"
            COLOR=16776960
          fi
          
          # Construir campos adicionais
          ADDITIONAL_FIELDS=""
          if [[ -n "$ENVIRONMENT" ]]; then
            ADDITIONAL_FIELDS="
            ,{
              \"name\": \"Ambiente\",
              \"value\": \"$ENVIRONMENT\",
              \"inline\": true
            }"
            
            if [[ "$CONCLUSION" == "success" && -n "$ENV_URL" ]]; then
              ADDITIONAL_FIELDS="$ADDITIONAL_FIELDS
              ,{
                \"name\": \"URL\",
                \"value\": \"[Acessar aplicação]($ENV_URL)\",
                \"inline\": false
              }"
            fi
          fi
          
          # Criar payload
          CONTENT_FIELD=""
          if [[ -n "$MENTION" ]]; then
            CONTENT_FIELD="\"content\": \"$MENTION **$REPO**\","
          fi
          
          cat > payload.json << EOF
          {
            $CONTENT_FIELD
            "embeds": [
              {
                "title": "$EMOJI $TITLE",
                "url": "$RUN_URL",
                "description": "Workflow **$REPO** $(if [[ "$CONCLUSION" == "success" ]]; then echo "executado com sucesso"; else echo "falhou"; fi)",
                "color": $COLOR,
                "fields": [
                  {
                    "name": "Workflow",
                    "value": "$WORKFLOW_NAME",
                    "inline": true
                  },
                  {
                    "name": "Branch",
                    "value": "$BRANCH",
                    "inline": true
                  },
                  {
                    "name": "Status",
                    "value": "$CONCLUSION",
                    "inline": true
                  }$ADDITIONAL_FIELDS
                ],
                "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
              }
            ]
          }
          EOF
          
          curl -sS -X POST -H "Content-Type: application/json" -d @payload.json "$WEBHOOK"

  notify-push:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Post Push Info to Discord
        env:
          WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
          REPO: ${{ github.repository }}
          BRANCH: ${{ github.ref_name }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          COMMIT_AUTHOR: ${{ github.event.head_commit.author.name }}
          COMMIT_URL: ${{ github.event.head_commit.url }}
        run: |
          # Só notificar pushes para branches principais
          if [[ "$BRANCH" != "main" && "$BRANCH" != "develop" ]]; then
            echo "Branch $BRANCH não é principal, pulando notificação"
            exit 0
          fi
          
          # Configurar emoji e cor baseado na branch
          if [[ "$BRANCH" == "main" ]]; then
            EMOJI="🔥"
            COLOR=16711680
            BRANCH_DESC="branch principal"
          else
            EMOJI="🧪"
            COLOR=3447003
            BRANCH_DESC="branch de desenvolvimento"
          fi
          
          # Truncar mensagem se muito longa
          COMMIT_SHORT=$(echo "$COMMIT_MESSAGE" | head -c 100)
          if [[ ${#COMMIT_MESSAGE} -gt 100 ]]; then
            COMMIT_SHORT="$COMMIT_SHORT..."
          fi
          
          cat > payload.json << EOF
          {
            "embeds": [
              {
                "title": "$EMOJI Push para $BRANCH",
                "url": "$COMMIT_URL",
                "description": "Novo commit na $BRANCH_DESC de **$REPO**",
                "color": $COLOR,
                "fields": [
                  {
                    "name": "Autor",
                    "value": "$COMMIT_AUTHOR",
                    "inline": true
                  },
                  {
                    "name": "Branch",
                    "value": "$BRANCH",
                    "inline": true
                  },
                  {
                    "name": "Mensagem",
                    "value": "$COMMIT_SHORT",
                    "inline": false
                  }
                ],
                "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
              }
            ]
          }
          EOF
          
          curl -sS -X POST -H "Content-Type: application/json" -d @payload.json "$WEBHOOK"