name: Frontend CI/CD Pipeline

on:
  push:
    branches: [dev, main, newboilerplate]
  pull_request:
    branches: [dev, main, newboilerplate]

permissions:
  contents: read
  security-events: write
  actions: read

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: ages-pro-mata/frontend
  NODE_VERSION: "22.18.0"

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit

      - name: TypeScript Check
        run: |
          npx tsc --noEmit

      - name: Build Application
        env:
          VITE_API_URL: ${{ github.ref == 'refs/heads/main' && 'https://api.promata.duckdns.org' || 'https://api.promata-dev.duckdns.org' }}
          VITE_APP_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
          VITE_APP_VERSION: ${{ github.sha }}
        run: npm run build

      - name: Run Tests
        run: |
          npm test || true

      - name: Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
          retention-days: 7

  security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Run Security Audit
        run: |
          npm audit --audit-level=high --production || true

      - name: Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: "trivy-results.sarif"

  build-and-push:
    needs: [test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Build Application
        env:
          VITE_API_URL: ${{ github.ref == 'refs/heads/main' && 'https://api.promata.duckdns.org' || 'https://api.promata-dev.duckdns.org' }}
          VITE_APP_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
          VITE_APP_VERSION: ${{ github.sha }}
        run: npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set Docker Configuration
        id: docker-config
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "dockerfile=Dockerfile.prod" >> $GITHUB_OUTPUT
            echo "image_name=${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
            echo "tag_suffix=" >> $GITHUB_OUTPUT
          else
            echo "dockerfile=Dockerfile.dev" >> $GITHUB_OUTPUT
            echo "image_name=${{ env.IMAGE_NAME }}-dev" >> $GITHUB_OUTPUT
            echo "tag_suffix=-dev" >> $GITHUB_OUTPUT
          fi

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.docker-config.outputs.image_name }}
          tags: |
            type=ref,event=branch,suffix=${{ steps.docker-config.outputs.tag_suffix }}
            type=sha,prefix=sha-,suffix=${{ steps.docker-config.outputs.tag_suffix }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ steps.docker-config.outputs.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}
