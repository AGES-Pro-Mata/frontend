name: Frontend CI/CD Pipeline

on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [dev, main]
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME_BASE: norohim/pro-mata-frontend
  NODE_VERSION: "22.12.0"
  
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit --legacy-peer-deps

      - name: Generate Routes (TanStack Router)
        run: |
          npm run generate-routes

      - name: TypeScript Check
        run: |
          npm run type-check

      - name: Lint Check (if available)
        run: |
          npm run lint || echo "No lint script found, skipping..."

      - name: Build Application
        env:
          VITE_API_URL: https://api.promata.com.br
          VITE_APP_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
          VITE_APP_VERSION: ${{ github.sha }}
        run: npm run build:ci

      - name: Test Build Output
        run: |
          if [ ! -d "dist" ]; then
            echo "Error: dist directory not found after build"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "Error: index.html not found in dist"
            exit 1
          fi
          echo "Build output validation successful"

      - name: Run Tests (Vitest)
        run: |
          npm test || echo "No tests found, continuing..."

      - name: Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
          retention-days: 7

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Dependencies
        run: npm ci --legacy-peer-deps

      - name: Run Security Audit
        run: |
          npm audit --audit-level=moderate --production || true

      - name: Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: "trivy-results.sarif"

  build-and-push:
    needs: [test, security-scan]
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main')) ||
      (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true) ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Dependencies
        run: npm ci --legacy-peer-deps

      - name: Build Application
        env:
          VITE_API_URL: https://api.promata.com.br
          VITE_APP_ENV: ${{ (github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main')) && 'production' || 'development' }}
          VITE_APP_VERSION: ${{ github.sha }}
        run: npm run build:ci

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set Docker Configuration
        id: docker-config
        run: |
          # Determinar a branch de destino para PRs mergeados ou branch atual para push
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            TARGET_BRANCH="${{ github.event.pull_request.base.ref }}"
          else
            TARGET_BRANCH="${{ github.ref_name }}"
          fi
          
          echo "target_branch=${TARGET_BRANCH}" >> $GITHUB_OUTPUT
          
          # Always use production dockerfile and single domain
          echo "dockerfile=Dockerfile.prod" >> $GITHUB_OUTPUT
          if [ "${TARGET_BRANCH}" = "main" ]; then
            echo "image_name=${{ env.IMAGE_NAME_BASE }}" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "image_name=${{ env.IMAGE_NAME_BASE }}-dev" >> $GITHUB_OUTPUT
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.docker-config.outputs.image_name }}
          tags: |
            type=raw,value=latest

      - name: Build and Push Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ steps.docker-config.outputs.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}
            VITE_API_URL=https://api.promata.com.br
            VITE_APP_ENV=${{ steps.docker-config.outputs.environment }}
            VITE_APP_VERSION=${{ github.sha }}

      - name: Build Summary
        run: |
          echo "## üê≥ Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Target Branch** | ${{ steps.docker-config.outputs.target_branch }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Image Name** | ${{ steps.docker-config.outputs.image_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Environment** | ${{ steps.docker-config.outputs.environment }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Dockerfile** | ${{ steps.docker-config.outputs.dockerfile }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Event Type** | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Tags** | ${{ steps.meta.outputs.tags }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Deploy Event** | ${{ steps.docker-config.outputs.target_branch == 'main' && 'deploy-prod-frontend' || 'deploy-dev-frontend' }} |" >> $GITHUB_STEP_SUMMARY

  trigger-deploy:
    name: üöÄ Trigger Infrastructure Deployment
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: success() && (github.event_name == 'push' && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch')
    steps:
      - name: Determine deployment configuration
        id: deploy-config
        run: |
          # Determine target branch for deployment
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TARGET_BRANCH="${{ github.ref_name }}"
          else
            TARGET_BRANCH="${{ github.ref_name }}"
          fi
          
          echo "target_branch=${TARGET_BRANCH}" >> $GITHUB_OUTPUT
          
          # Set deployment event type and image based on target branch
          if [ "${TARGET_BRANCH}" = "main" ]; then
            echo "event_type=deploy-prod-frontend" >> $GITHUB_OUTPUT
            echo "image_name=norohim/pro-mata-frontend" >> $GITHUB_OUTPUT
          else
            echo "event_type=deploy-dev-frontend" >> $GITHUB_OUTPUT
            echo "image_name=norohim/pro-mata-frontend-dev" >> $GITHUB_OUTPUT
          fi

      - name: Dispatch to Infrastructure Repository
        uses: peter-evans/repository-dispatch@v3
        continue-on-error: true
        with:
          token: ${{ secrets.PAT_INFRASTRUCTURE_REPO }}
          repository: AGES-Pro-Mata/infrastructure
          event-type: ${{ steps.deploy-config.outputs.event_type }}
          client-payload: |
            {
              "image": "${{ steps.deploy-config.outputs.image_name }}:latest",
              "commit": "${{ github.sha }}",
              "branch": "${{ steps.deploy-config.outputs.target_branch }}",
              "triggered_by": "frontend"
            }
      
      - name: Infrastructure Dispatch Status
        run: |
          if [ -z "${{ secrets.PAT_INFRASTRUCTURE_REPO }}" ]; then
            echo "‚ö†Ô∏è PAT_INFRASTRUCTURE_REPO secret not configured"
            echo "Skipping infrastructure deployment trigger"
          else
            echo "‚úÖ Infrastructure deployment triggered successfully"
          fi
