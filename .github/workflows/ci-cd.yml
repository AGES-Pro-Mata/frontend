name: Frontend CI/CD Pipeline

on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [dev, main]
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME_BASE: norohim/pro-mata-frontend
  NODE_VERSION: "22.12.0"
  
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit --legacy-peer-deps

      - name: Generate Routes (TanStack Router)
        run: |
          npm run generate-routes

      - name: TypeScript Check
        run: |
          npm run type-check

      - name: Lint Check (if available)
        run: |
          npm run lint || echo "No lint script found, skipping..."

      - name: Build Application
        env:
          VITE_API_URL: https://api.promata.com.br
          VITE_APP_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
          VITE_APP_VERSION: ${{ github.sha }}
        run: npm run build:ci

      - name: Test Build Output
        run: |
          if [ ! -d "dist" ]; then
            echo "Error: dist directory not found after build"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "Error: index.html not found in dist"
            exit 1
          fi
          echo "Build output validation successful"

      - name: Run Tests (Vitest)
        run: |
          npm test || echo "No tests found, continuing..."

      - name: Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
          retention-days: 7

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Dependencies
        run: npm ci --legacy-peer-deps

      - name: Run Security Audit
        run: |
          npm audit --audit-level=moderate --production || true

      - name: Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: "trivy-results.sarif"

  deploy-static-site:
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ vars.AWS_REGION || 'us-east-2' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Dependencies
        run: npm ci --legacy-peer-deps

      - name: Build Application
        env:
          VITE_UMAMI_WEBSITE_ID: ${{ vars.VITE_UMAMI_WEBSITE_ID }}
          VITE_UMAMI_SCRIPT_URL: ${{ vars.VITE_UMAMI_SCRIPT_URL }}
          VITE_API_URL: ${{ vars.VITE_API_URL }}
          VITE_ENABLE_DEVTOOLS: false
          VITE_APP_ENV: production
          VITE_APP_VERSION: ${{ github.sha }}
        run: npm run build:ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Sync artifacts to S3
        env:
          TARGET_BUCKET: ${{ vars.AWS_S3_BUCKET }}
        run: |
          if [ -z "$TARGET_BUCKET" ]; then
            echo "TARGET_BUCKET not configured"
            exit 1
          fi

          aws s3 sync dist/ "s3://$TARGET_BUCKET" --delete

      - name: Invalidate CloudFront cache
        if: env.CLOUDFRONT_DISTRIBUTION_ID != ''
        run: |
          aws cloudfront create-invalidation \
            --distribution-id "$CLOUDFRONT_DISTRIBUTION_ID" \
            --paths '/*'
        env:
          CLOUDFRONT_DISTRIBUTION_ID: ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}

      - name: Deployment Summary
        run: |
          echo "## 🌐 Static Site Deployment" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Branch** | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Bucket** | ${{ vars.AWS_S3_BUCKET }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **CloudFront Distribution** | ${{ vars.CLOUDFRONT_DISTRIBUTION_ID || 'None' }} |" >> $GITHUB_STEP_SUMMARY
